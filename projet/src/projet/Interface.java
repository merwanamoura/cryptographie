/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projet;

import static projet.BW.listeTrier;
import static projet.BW.motDecompresser;
import static projet.MTF.listeChiffreDecompression;
import static projet.MTF.listeCodeMot;
import static projet.MTF.listeLettreMot;

/**
 *
 * @author ma522501
 */
public class Interface extends javax.swing.JFrame {

    BW bw;
    MTF mtf;
    Huffman huff;
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
        this.setSize(800,600);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        panelCentre = new javax.swing.JPanel();
        panelCompression = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaCompression = new javax.swing.JTextArea();
        labelCompression = new javax.swing.JLabel();
        panelDecompression = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaDecompression = new javax.swing.JTextArea();
        labelDecompression = new javax.swing.JLabel();
        panelNorth = new javax.swing.JPanel();
        zoneTexte = new javax.swing.JPanel();
        srollPane = new javax.swing.JScrollPane();
        chaineAcoder = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        zoneBouton = new javax.swing.JPanel();
        buttonBW = new javax.swing.JButton();
        buttonMTF = new javax.swing.JButton();
        buttonHuffman = new javax.swing.JButton();
        buttonAll = new javax.swing.JButton();
        panelSud = new javax.swing.JPanel();
        panelCodageFinal = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaCodeFinal = new javax.swing.JTextArea();
        labelCodeFinal = new javax.swing.JLabel();
        panelDecodageFinal = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaDecodageFinal = new javax.swing.JTextArea();
        labeDecodageFinal = new javax.swing.JLabel();

        jScrollPane5.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelCentre.setLayout(new java.awt.GridLayout(1, 2));

        panelCompression.setLayout(new java.awt.BorderLayout());

        textAreaCompression.setColumns(20);
        textAreaCompression.setRows(5);
        textAreaCompression.setEnabled(false);
        jScrollPane1.setViewportView(textAreaCompression);

        panelCompression.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        labelCompression.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCompression.setText("Les étapes de la compression");
        panelCompression.add(labelCompression, java.awt.BorderLayout.PAGE_START);

        panelCentre.add(panelCompression);

        panelDecompression.setLayout(new java.awt.BorderLayout());

        textAreaDecompression.setColumns(20);
        textAreaDecompression.setRows(5);
        textAreaDecompression.setEnabled(false);
        jScrollPane2.setViewportView(textAreaDecompression);

        panelDecompression.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        labelDecompression.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDecompression.setText("Les étapes de la décompression");
        panelDecompression.add(labelDecompression, java.awt.BorderLayout.PAGE_START);

        panelCentre.add(panelDecompression);

        getContentPane().add(panelCentre, java.awt.BorderLayout.CENTER);

        panelNorth.setLayout(new java.awt.GridLayout(1, 2));

        zoneTexte.setLayout(new java.awt.BorderLayout());

        chaineAcoder.setColumns(20);
        chaineAcoder.setRows(5);
        srollPane.setViewportView(chaineAcoder);

        zoneTexte.add(srollPane, java.awt.BorderLayout.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Votre texte : ");
        zoneTexte.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        panelNorth.add(zoneTexte);

        zoneBouton.setLayout(new java.awt.GridLayout(2, 2));

        buttonBW.setText("Burrows-Wheeler");
        buttonBW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBWActionPerformed(evt);
            }
        });
        zoneBouton.add(buttonBW);

        buttonMTF.setText("Move-to-front");
        buttonMTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMTFActionPerformed(evt);
            }
        });
        zoneBouton.add(buttonMTF);

        buttonHuffman.setText("Huffman");
        buttonHuffman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHuffmanActionPerformed(evt);
            }
        });
        zoneBouton.add(buttonHuffman);

        buttonAll.setText("All");
        buttonAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAllActionPerformed(evt);
            }
        });
        zoneBouton.add(buttonAll);

        panelNorth.add(zoneBouton);

        getContentPane().add(panelNorth, java.awt.BorderLayout.NORTH);

        panelSud.setLayout(new java.awt.GridLayout(1, 2));

        panelCodageFinal.setLayout(new java.awt.BorderLayout());

        textAreaCodeFinal.setColumns(20);
        textAreaCodeFinal.setRows(5);
        textAreaCodeFinal.setEnabled(false);
        jScrollPane3.setViewportView(textAreaCodeFinal);

        panelCodageFinal.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        labelCodeFinal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCodeFinal.setText("Code Final");
        panelCodageFinal.add(labelCodeFinal, java.awt.BorderLayout.PAGE_START);

        panelSud.add(panelCodageFinal);

        panelDecodageFinal.setLayout(new java.awt.BorderLayout());

        textAreaDecodageFinal.setColumns(20);
        textAreaDecodageFinal.setRows(5);
        textAreaDecodageFinal.setEnabled(false);
        jScrollPane4.setViewportView(textAreaDecodageFinal);

        panelDecodageFinal.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        labeDecodageFinal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labeDecodageFinal.setText("Décodage Final");
        panelDecodageFinal.add(labeDecodageFinal, java.awt.BorderLayout.PAGE_START);

        panelSud.add(panelDecodageFinal);

        getContentPane().add(panelSud, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBWActionPerformed
        // TODO add your handling code here:
        String chaine = chaineAcoder.getText();
        if(!chaine.equals("") && !chaine.equals(null)){
            bw = new BW();
            bw.compression(chaine);
            String code = bw.code;
            textAreaCodeFinal.setText(code);
            textAreaCompression.setText(etapeCompressionBW(bw));
            
            bw.decompression(code);
            String decodage = bw.motDecompresser;
            textAreaDecodageFinal.setText(decodage);
            
            textAreaDecompression.setText(etapeDecompressionBW(bw));
        }
    }//GEN-LAST:event_buttonBWActionPerformed

    private void buttonMTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMTFActionPerformed
        // TODO add your handling code here:
        String chaine = chaineAcoder.getText();
        if(!chaine.equals("") && !chaine.equals(null)){
            mtf=new MTF();
            mtf.compression(chaine);
            String code=mtf.codeLettre;
            textAreaCodeFinal.setText(code);
            
            mtf.decompression(code);
            String decodage = mtf.motDecompresser;
            textAreaDecodageFinal.setText(decodage);
            

            textAreaCompression.setText(etapeCompressionMTF(mtf));
            textAreaDecompression.setText(etapeDecompressionMTF(mtf));
        }
    }//GEN-LAST:event_buttonMTFActionPerformed

    private void buttonHuffmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHuffmanActionPerformed
        // TODO add your handling code here:
        
        String chaine = chaineAcoder.getText();
        if(!chaine.equals("") && !chaine.equals(null)){
            huff=new Huffman();
            huff.compression(chaine);
            String code = huff.motCode;
            textAreaCodeFinal.setText(code);
            textAreaCompression.setText(etapeCompressionHuff(huff));
            
            huff.decompression(code);
            String decodage = huff.motDecode;
            textAreaDecodageFinal.setText(decodage);
            textAreaDecompression.setText(etapeDecompressionHuff(huff));
        }

        
    }//GEN-LAST:event_buttonHuffmanActionPerformed

    private void buttonAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAllActionPerformed
        // TODO add your handling code here:
        
        String chaine = chaineAcoder.getText();
        if(!chaine.equals("") && !chaine.equals(null)){
            String str="";
            String str2="";
            //compression
            bw = new BW();
            bw.compression(chaine);
            String code1 = bw.code;
            str+="\nCode obtenu après Burrows Wheeler : " + code1 + "\n";
            
            mtf=new MTF();
            mtf.compression(code1);
            String code2=mtf.codeLettre;
            str+="Code obtenu après Move-to-Front : " + code2 + "\n";
            
            huff=new Huffman();
            huff.compression(code2);
            String code3 = huff.motCode;
            str+="Le code Final est obtenu après Huffman";
            
            textAreaCodeFinal.setText(code3);
            textAreaCompression.setText(str);
            
            //decompression
            huff.decompression(code3);
            String decodage1 = huff.motDecode;
            str2+="\nDécodage obtenu après Huffman : " + decodage1 + "\n";
            
            mtf.decompression(decodage1);
            String decodage2 = mtf.motDecompresser;
            str2+="Décodage obtenu après Move-to-Front : " + decodage2 + "\n";
            
            bw.decompression(decodage2);
            String decodage3 = bw.motDecompresser;
            str2+="Le décodage Final est obtenu après Burrows Wheeler";
            
            textAreaDecodageFinal.setText(decodage3);
            textAreaDecompression.setText(str2);
        }

    }//GEN-LAST:event_buttonAllActionPerformed

     String etapeDecompressionHuff(Huffman h){
        String str="";
        str += "Il suffit de reperer dans le code\n" ;
        str +="un caractere parmi la liste presente\n";
        str +=h.getEtapeDecompression();
        
        return str;
    }
     
    String etapeCompressionHuff(Huffman h){
        String str="";
        str += "Après construction de l'arbre binaire,\n" ;
        str += "on obtient ces codes pour chaque caractères : \n\n";        
        str += h.getEtapeCompression();
 
        return str;
    }
    String etapeCompressionMTF(MTF m){
        String str="";
        str += "Tableau initial des Lettres du mot Triés : \n" ;
        
        for(int i=0; i<m.listeCaractereTriee.size();i++) str += i + " "; 
        str += "\n";
        for(int i=0; i<m.listeCaractereTriee.size();i++) str += mtf.listeCaractereTriee.get(i) + " ";
        
        str += "\n\nEtape du codage : \n\n" ;
        
        for(int i=0; i<m.listeCaractereTriee.size();i++) str += i + " ";
        
        str+="\n";

        str += m.getEtapeCompression();
        
        str+="\n\nCode final : " + mtf.listeCodeMot;
             
        return str;
    }
    
    String etapeDecompressionMTF(MTF m){
        String str="";
        str += "Le mot à décoder et son tableau codé : \n" ;

        for(int i=0; i<m.listeCodeLettre.size();i++) str += mtf.listeCodeLettre.get(i) + " ";
        str+="\n";
        for(int i=0; i<m.listeChiffreDecompression.size();i++) str += mtf.listeChiffreDecompression.get(i) + " ";
        
        str += "\n\nEtape du Décodage : \n\n" ;
        
        for(int i=0; i<m.listeCaractereTriee.size();i++) str += i + " ";
        
        str+="\n";

        str += m.getEtapeDecompression();
        
        return str;
    }
    
    String etapeCompressionBW(BW b){
        String str="";
        str += "Liste de départ non triée : \n\n" ;
        for(int i=0; i<b.listeDepart.size();i++) {
            str += b.listeDepart.get(i) + "\n";
        }
        
        str += "\nListe de départ triée : \n\n" ;
        
        for(int i=0; i<b.listeTrier.size();i++) {
            str += b.listeTrier.get(i) + "\n";
        }
        
        str += "\nLa bonne chaine de caractere se trouve à la position  : " + b.sauvegarde ;
        
        return str;
    }
    
    String etapeDecompressionBW(BW b){
        String str="";
        str += "Liste codé : \n" ;
        for(int i=0; i<b.listeCode.size();i++) {
            str += b.listeCode.get(i) + " ";
        }
        
        str += "\n\nListe classé : \n" ;
        
        for(int i=0; i<b.listeClasse.size();i++) {
            str += b.listeClasse.get(i) + " ";
        }
        str+="\n\n";
        
        str += bw.getEtapeDecompression();
        
        return str;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAll;
    private javax.swing.JButton buttonBW;
    private javax.swing.JButton buttonHuffman;
    private javax.swing.JButton buttonMTF;
    private javax.swing.JTextArea chaineAcoder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel labeDecodageFinal;
    private javax.swing.JLabel labelCodeFinal;
    private javax.swing.JLabel labelCompression;
    private javax.swing.JLabel labelDecompression;
    private javax.swing.JPanel panelCentre;
    private javax.swing.JPanel panelCodageFinal;
    private javax.swing.JPanel panelCompression;
    private javax.swing.JPanel panelDecodageFinal;
    private javax.swing.JPanel panelDecompression;
    private javax.swing.JPanel panelNorth;
    private javax.swing.JPanel panelSud;
    private javax.swing.JScrollPane srollPane;
    private javax.swing.JTextArea textAreaCodeFinal;
    private javax.swing.JTextArea textAreaCompression;
    private javax.swing.JTextArea textAreaDecodageFinal;
    private javax.swing.JTextArea textAreaDecompression;
    private javax.swing.JPanel zoneBouton;
    private javax.swing.JPanel zoneTexte;
    // End of variables declaration//GEN-END:variables
}
